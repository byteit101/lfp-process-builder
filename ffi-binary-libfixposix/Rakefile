# frozen_string_literal: true
require "mini_portile2"
require "rake/clean"
require 'rubygems/package_task'
require 'bundler'


# currently supported binaries for building
# [ruby-platform, gcc-target, docker-image-name]
targets = [
# Linux
%w{x86-linux			i686-linux-gnu			linux-i686},		# UNTESTED
%w{x86_64-linux			x86_64-linux-gnu		linux-x64},			# Tested by byteit101 Deb11 0.1/0.5.1.0 locally 4/2023
%w{aarch64-linux		aarch64-linux-gnu		linux-arm64},		# Broken in 0.5.1.1 (raspi v3+)
%w{arm-linux			armv6-linux-gnu			linux-arm},			# UNTESTED (raspi v1) works on v7hf as "arm-linux"
	# "armv7l-linux-eabihf", etc for rubygems D-:
%w{s390x-linux			s390x-ibm-linux-gnu		linux-s390x},		# Tested by byteit101 Deb12 0.1.1/0.5.1.1+ in VM 5/2024
%w{ppc64le-linux		ppc64le-linux-gnu		linux-ppc64le},		# UNTESTED
%w{riscv64-linux		riscv64-linux-gnu		linux-riscv64},		# UNTESTED
%w{mips64le-linux		mips64le-linux-gnu		linux-mips64el},	# UNBUILT, UNTESTED
%w{loongarch64-linux	loongarch64-linux-gnu	linux-loongarch64},	# UNBUILT, UNTESTED
# MacOS
%w{x86_64-darwin 		x86_64-apple-darwin},					# Broken for macos 10.14 (5/24)
%w{arm64-darwin			arm64-apple-darwin}, 					# Tested by headius 0.1.1/0.5.1.1 locally 4/2023
# FreeBSD
%w{arm64-freebsd11		arm64-freebsd11		arm64-freebsd11},    # UNTESTED
%w{x86-freebsd			i386-freebsd9		i386-freebsd9}, 			# UNTESTED
%w{x86_64-freebsd		x86_64-freebsd9		x86_64-freebsd9},		# Tested by byteit101 13.2 0.1.1/0.5.1.1 in VM 5/2024
	# Local builds require: x86_64-freebsd-13 x86_64-portbld-freebsd13.2 (or whatever the version is)
	# gem install ... requires -13 too

# Other BSD
%w{x86_64-OpenBSD amd64-unknown-openbsd6.8 x86_64-openbsd6.8}, # UNBUILT, UNTESTED 
	# Local builds output x86_64-openbsd6.8 and for MRI too


#%w{x86_64-dragonfly-6.4 x86_64-pc-dragonflybsd}, # UNTESTED NOTE: needs Gem::Platform.new(["x86_64","dragonfly", "6.4"])

]

# define tab-completion helpers
targets.each do |(platform, host)|
	desc "Build gem for #{platform} (#{host})"
	task "build:#{platform}" do
		task(:target).invoke(platform)
	end
	# if platform != host
	# 	desc "Build gem for #{platform} (#{host})"
	# 	task "build:#{host}" do
	# 		task(:target).invoke(platform)
	# 	end
	# end
	desc "Build binary #{platform} (#{host})"
	task "cross:#{platform}" do
		task(:cross).invoke(platform)
	end
end

desc "Build the binary for [target] via [dockcross]"
task :cross, [:target] do |_, args|
	platform, host, docker = targets.find{|x| x.include? args[:target] }
	rm_rf "tmp/#{platform}"
	mkdir_p "tmp/#{platform}/conf"
	mkdir_p "tmp/#{platform}/out"
	scriptsh = "tmp/#{platform}/build.sh"
	fix32bit = ""
	fixbsd = if platform.downcase.include? "openbsd"
		"mv ../out/usr/lib/libfixposix.so.* ../out/usr/lib/libfixposix.so"
	else
		""
	end
	File.write(scriptsh, <<~SCRIPT)
		#!/bin/sh
		echo $CROSS_TRIPLE "---" #{host}
		set -x
		set -e
		source=$PWD/libfixposix
		outdir=$(realpath $(dirname $0)/out)
		cd `dirname $0`/conf
		$source/configure --enable-shared --disable-static --without-debug --host=#{host} --build x86_64-linux-gnu --prefix=/usr/ #{fix32bit}
		make -j4
		make install DESTDIR=$outdir
		#{fixbsd}
		${CROSS_COMPILE}strip ../out/usr/lib/libfixposix.so
	SCRIPT
	chmod 0755, scriptsh
	cd File.dirname(__dir__) do
		tmp = if File.exist? "binary-builders/dockcross-#{docker}"
			sh(%Q{binary-builders/dockcross-#{docker} ffi-binary-libfixposix/#{scriptsh}})
		else
			sh(%Q{binary-builders/manual-#{docker} ffi-binary-libfixposix/#{scriptsh}})
		end
		raise "Error! #{$?.inspect} #{$?} #{tmp}" if $? != 0
	end
	suffix = host.include?("darwin") ? "dylib" : "so"
	dest =  "../ci-output/lib/#{platform}/libfixposix.#{suffix}"
	mkdir_p(File.dirname(dest))
	cp(
		File.join("tmp/#{platform}/out/usr/lib/libfixposix.#{suffix}"), 
		File.join(__dir__, "lib/libfixposix/binary/libfixposix.#{suffix}"), 
		verbose: true
	)
end

def specfix(list)
	list.map{|x|
		if x.include? 'libfixposix.'
			yield x
		else
			x
		end
	}
end

saved_target_arg = nil # rake SHOULD pass down args to dependant tasks, but gem isn't passing them through

desc "Build the gem for [target] ex: `rake target[x86_64-linux]`"
task :target, [:target] do |_, args|
	platform, host = args[:target] == "java" ? %w{java java} : targets.find{|x| x.include? args[:target] }
	raise "Missing platform, try target[platform-to-build], see rake -T for build: targets" if host.nil?
	spec = Gem::Specification::load("ffi-binary-libfixposix.gemspec").dup
	spec.original_platform = spec.platform = Gem::Platform.new(platform)
	if host == "java"
		spec.files = specfix(spec.files){ Dir["lib/libfixposix/binary/*/libfixposix.*"]}.flatten
	else
		spec.files = specfix(spec.files){|x|x.split(".").first + (platform.to_s.include?("darwin") ? ".dylib"  : ".so")}
	end
	p spec.files
	task = Gem::PackageTask.new(spec)
	saved_target_arg = host
	puts "Generating gem task for #{platform}/#{host}"
	task.define
	#task(:binary).invoke(platform)
	task(:gem).invoke()
	Bundler.ui.confirm "#{spec.name} #{spec.version} built to pkg/#{File.basename(Dir[File.join(__dir__, "pkg", "#{spec.name}-*.gem")].sort_by {|f| File.mtime(f) }.last)}."
end

desc 'Builds the local libfixposix binary for the curent or specified host'
task :binary, [:target] do |_, args|
	recipe = MiniPortile.new("libfixposix", "current") # version doesn't matterz
	host = args[:target] || saved_target_arg || recipe.original_host.sub(/redhat\-/,"")
	recipe.host = host if host
	host = host || RbConfig.expand("$(target_cpu)-$(target_os)") # mac os doesn't have it?
	if host.match(/^(.*darwin)[\d.]+$/)
		host = $1 # trim off darwin19 to just darwin
	end
	if host.include? "darwin" and host.include? "arm64" and !RbConfig.expand("$(target_cpu)".dup).include? "arm"
		# cross compiling mac
		puts "Detected mac cross compiling"
		recipe.configure_options += ["--target=arm64-apple-darwin", "CFLAGS=-target arm64-apple-darwin -arch arm64", "LDFLAGS=-target arm64-apple-darwin "] # why is it different? idk...
	end
	puts "Searching for host '#{host}'..."

	platform, host = targets.find{|x| x.include? host } # find our host
	puts "Building using host triple #{host}"

	recipe.source_directory = "../libfixposix"
	recipe.configure_options += ["--enable-shared", "--disable-static", "--without-debug"]
	if host.include? "i686" # TODO: more robust
		recipe.configure_options += ["CFLAGS=-m32", "CXXFLAGS=-m32", "LDFLAGS=-m32", "--host=#{host}"]
	end

	suffix = host.include?("darwin") ? "dylib" : "so"
	recipe.cook # always rebuild, never cache
	#recipe.activate
	openbsdsuffix = if host.downcase.include?("openbsd") and !File.exist?(File.join(recipe.path, "lib/libfixposix.#{suffix}"))
		Dir[File.join(recipe.path, "lib/libfixposix.so*")].first.split("libfixposix.so").last
	else
		""
	end
	cp(
		File.join(recipe.path, "lib/libfixposix.#{suffix}#{openbsdsuffix}"), 
		File.join(__dir__, "lib/libfixposix/binary/libfixposix.#{suffix}"), 
		verbose: true
	)

	# ~140k -> ~40k
	sh "strip #{suffix == "dylib" ? "-ru" : "-s"} #{File.join(__dir__, "lib/libfixposix/binary/libfixposix.#{suffix}").inspect}"
end


desc "Build the gem into the pkg directory. (local platform build)"
task "local" => %w{binary local:raw}

task "local:raw" => :binary do
	spec = Gem::Specification::load("ffi-binary-libfixposix.gemspec")
	task = Gem::PackageTask.new(spec)
	task.define
	task(:gem).invoke
	Bundler.ui.confirm "#{spec.name} #{spec.version} built to pkg/#{File.basename(Dir[File.join(__dir__, "pkg", "#{spec.name}-*.gem")].sort_by {|f| File.mtime(f) }.last)}."
end

CLOBBER.include("pkg/**/*", "pkg")
CLEAN.include(
	"ports/**/*", "ports",
	"tmp/**/*", "tmp",
	"lib/libfixposix/binary/libfixposix.so",
	"lib/libfixposix/binary/libfixposix.dylib"
)
