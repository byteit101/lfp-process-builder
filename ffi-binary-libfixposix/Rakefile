# frozen_string_literal: true
require "mini_portile2"
require "rake/clean"
require 'rubygems/package_task'


# currently supported binaries
targets = [
	%w{x86-linux i686-linux-gnu}, # UNTESTED
	%w{x86_64-linux x86_64-linux-gnu},
	%w{arm64-linux arm64-linux-gnu}, # UNTESTED
	%w{x86_64-darwin x86_64-darwin}, # UNTESTED
	%w{arm64-darwin arm64-darwin}, # UNTESTED
	# TODO: add other platforms, like the BSD's
]

# define tab-completion helpers
targets.each do |(platform, host)|
	desc "Build gem for #{platform} (#{host})"
	task "build:#{platform}" do
		task(:target).invoke(platform)
	end
	if platform != host
		desc "Build gem for #{platform} (#{host})"
		task "build:#{host}" do
			task(:target).invoke(platform)
		end
	end
end

saved_target_arg = nil # rake SHOULD pass down args to dependant tasks, but gem isn't passing them through

desc "Build the gem for [target] ex: `rake target[x86_64-linux]`"
task :target, [:target] do |_, args|
	platform, host = targets.find{|x| x.include? args[:target] }
	raise "Missing platform, try target[platform-to-build], see rake -T for build: targets" if host.nil?
	spec = Gem::Specification::load("ffi-binary-libfixposix.gemspec").dup
	spec.platform = Gem::Platform.new(platform)
	spec.files[-1] = spec.files.last.split(".").first + (platform.to_s.include?("darwin") ? ".dylib"  : ".so")
	task = Gem::PackageTask.new(spec)
	saved_target_arg = host
	puts "Generating gem task for #{platform}/#{host}"
	task.define
	task(:binary).invoke(platform)
	task(:gem).invoke(platform)
	Bundler.ui.confirm "#{spec.name} #{spec.version} built to pkg/#{File.basename(Dir[File.join(__dir__, "pkg", "#{spec.name}-*.gem")].sort_by {|f| File.mtime(f) }.last)}."
end

desc 'Builds the local libfixposix binary for the curent or specified host'
task :binary, [:target] do |_, args|
	recipe = MiniPortile.new("libfixposix", "current") # version doesn't matterz
	host = args[:target] || saved_target_arg || recipe.original_host
	platform, host = targets.find{|x| x.include? host } # find our host
	puts "Building using host triple #{host}"

	recipe.source_directory = "../libfixposix"
	recipe.configure_options += ["--enable-shared", "--disable-static", "--without-debug"]

	suffix = (host || RbConfig::CONFIG["target_os"]).include?("darwin") ? "dylib" : "so"
	recipe.host = host if host
	recipe.cook # always rebuild, never cache
	#recipe.activate
	cp(
		File.join(recipe.path, "lib/libfixposix.#{suffix}"), 
		File.join(__dir__, "lib/libfixposix/binary/libfixposix.#{suffix}"), 
		verbose: true
	)

	# ~140k -> ~40k
	sh "strip #{suffix == "dylib" ? "-ru" : "-s"} #{File.join(__dir__, "lib/libfixposix/binary/libfixposix.#{suffix}").inspect}"
end


desc "Build the gem into the pkg directory. (local platform build)"
task "local" => :binary do
	spec = Gem::Specification::load("ffi-binary-libfixposix.gemspec")
	task = Gem::PackageTask.new(spec)
	task.define
	task(:gem).invoke
	Bundler.ui.confirm "#{spec.name} #{spec.version} built to pkg/#{File.basename(Dir[File.join(__dir__, "pkg", "#{spec.name}-*.gem")].sort_by {|f| File.mtime(f) }.last)}."
end

CLOBBER.include("pkg")
CLEAN.include(
	"ports",
	"tmp",
	"lib/libfixposix/binary/libfixposix.so",
	"lib/libfixposix/binary/libfixposix.dylib"
)
